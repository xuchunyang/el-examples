#+TITLE: Examples for Emacs Lisp API

* replace-regexp-in-string

#+begin_src emacs-lisp
(replace-regexp-in-string "World" "Emacs" "Hello, World!")
#+end_src

#+RESULTS:
: Hello, Emacs!

#+begin_src emacs-lisp
(replace-regexp-in-string
 "[0-9][0-9]\\'"
 (lambda (string)
   (concat string
           (nth (string-to-number string)
                (append '("st" "nd" "rd") (make-list 17 "th")
                        '("st" "nd" "rd") (make-list 7 "th")
                        '("st")))))
 (format-time-string "%Y %b %d"))
#+end_src

#+RESULTS:
: 2018 Apr 12th

* string

#+begin_src emacs-lisp
(string ?H ?e ?l ?l ?o)
#+end_src

#+RESULTS:
: Hello

#+begin_src emacs-lisp
(apply #'string (number-sequence ?a ?z))
#+end_src

#+RESULTS:
: abcdefghijklmnopqrstuvwxyz

* pcase-let

#+begin_src emacs-lisp
(pcase-let ((`(,major-version ,minor-version)
             (split-string emacs-version "\\.")))
  (list major-version minor-version))
#+end_src

#+RESULTS:
| 26 | 1 |

* pcase-lambda

#+begin_src emacs-lisp
(funcall (pcase-lambda (`(,first ,_ ,third))
           (+ first third))
         '(1 2 3))
#+end_src

#+RESULTS:
: 4

* define-advice

#+begin_src emacs-lisp
(define-advice find-file (:around (old-fun &rest args) verbose)
  "Be verbose about what's going on."
  (let ((filename (car args)))
    (message "Opening %s..." filename)
    (apply old-fun args)
    (message "Opening %s...done" filename)))
#+end_src

To remove the advice

#+begin_src emacs-lisp
(advice-remove 'find-file 'find-file@verbose)
#+end_src
