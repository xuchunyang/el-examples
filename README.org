#+TITLE: Examples for Emacs Lisp API

* replace-regexp-in-string

#+begin_src emacs-lisp
(replace-regexp-in-string "World" "Emacs" "Hello, World!")
#+end_src

#+RESULTS:
: Hello, Emacs!

#+begin_src emacs-lisp
(replace-regexp-in-string
 "[0-9][0-9]\\'"
 (lambda (string)
   (concat string
           (nth (string-to-number string)
                (append '("st" "nd" "rd") (make-list 17 "th")
                        '("st" "nd" "rd") (make-list 7 "th")
                        '("st")))))
 (format-time-string "%Y %b %d"))
#+end_src

#+RESULTS:
: 2018 Apr 12th

* string

#+begin_src emacs-lisp
(string ?H ?e ?l ?l ?o)
#+end_src

#+RESULTS:
: Hello

#+begin_src emacs-lisp
(apply #'string (number-sequence ?a ?z))
#+end_src

#+RESULTS:
: abcdefghijklmnopqrstuvwxyz

* pcase-let

#+begin_src emacs-lisp
(pcase-let ((`(,major-version ,minor-version)
             (split-string emacs-version "\\.")))
  (list major-version minor-version))
#+end_src

#+RESULTS:
| 26 | 1 |

* pcase-lambda

#+begin_src emacs-lisp
(funcall (pcase-lambda (`(,first ,_ ,third))
           (+ first third))
         '(1 2 3))
#+end_src

#+RESULTS:
: 4

* define-advice

#+begin_src emacs-lisp
(define-advice find-file (:around (old-fun &rest args) verbose)
  "Be verbose about what's going on."
  (let ((filename (car args)))
    (message "Opening %s..." filename)
    (apply old-fun args)
    (message "Opening %s...done" filename)))
#+end_src

To remove the advice

#+begin_src emacs-lisp
(advice-remove 'find-file 'find-file@verbose)
#+end_src

* number-sequence

#+begin_src emacs-lisp
(number-sequence 1 10)
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

#+begin_src emacs-lisp
(number-sequence 1 10 2)
#+end_src

#+RESULTS:
| 1 | 3 | 5 | 7 | 9 |

* seq-map-indexed :26.1:

#+begin_src emacs-lisp
(seq-map-indexed
 (lambda (elt idx)
   (cons idx elt))
 '(a b c))
#+end_src

#+RESULTS:
: ((0 . a) (1 . b) (2 . c))

* setf

#+begin_src emacs-lisp
(let ((lst '(1 2 3 4 5)))
  (setf (nth 2 lst) 100)
  lst)
#+end_src

#+RESULTS:
| 1 | 2 | 100 | 4 | 5 |

#+begin_src emacs-lisp
(let ((ht (make-hash-table)))
  (puthash :name "Vi" ht)
  (setf (gethash :name ht) "Emacs")
  (gethash :name ht))
#+end_src

#+RESULTS:
: Emacs

#+begin_src emacs-lisp
(with-temp-buffer
  (insert "12345")
  (setf (buffer-string) (reverse (buffer-string)))
  (buffer-string))
#+end_src

#+RESULTS:
: 54321

#+begin_src emacs-lisp
(setf (point) (1+ (random (point-max))))
#+end_src

* nreverse

List

#+begin_src emacs-lisp
  (let ((l '(a b c)))
    (setq l (nreverse l)))
#+end_src

#+RESULTS:
| c | b | a |

Vector

#+begin_src emacs-lisp
  (let ((v '[a b c]))
    (nreverse v)
    v)
#+end_src

#+RESULTS:
: [c b a]

* mapconcat

#+begin_src emacs-lisp
  (mapconcat #'identity '("./autogen.sh" "./configure" "make") " && ")
#+end_src

#+RESULTS:
: ./autogen.sh && ./configure && make

#+begin_src emacs-lisp
  (mapconcat (lambda (char)
               (string (+ char (- ?A ?1))))
             "12345" "")
#+end_src

#+RESULTS:
: ABCDE

* dolist

#+begin_src emacs-lisp :results silent
  (dolist (x '("cool" "powerful" "addictive"))
    (message "Emacs is %s" x))
#+end_src

* mapc

#+begin_src emacs-lisp :results value pp
  (mapc (lambda (elt) (message "Emacs is %s" elt)) '(cool powerful addictive))
#+end_src

#+RESULTS:
: (cool powerful addictive)

* let-alist

#+begin_src emacs-lisp :results value pp
  ;; https://now.httpbin.org/
  (let ((alist '((time . ((epoch   . 1523635023.7332768)
                          (iso8601 . "2018-04-13T15:57:03.733277Z")
                          (rfc2822 . "Fri, 13 Apr 2018 15:57:03 GMT")
                          (rfc3339 . "2018-04-13T15:57:03.73Z")))
                 (lang . "en-US")
                 (ua   . "URL/Emacs Emacs/26.1"))))
    (let-alist alist
      (list .time.iso8601
            .lang
            .ua)))
#+end_src

#+RESULTS:
: ("2018-04-13T15:57:03.733277Z" "en-US" "URL/Emacs Emacs/26.1")

* if-let

#+begin_src emacs-lisp :results silent
  (if-let (root (locate-dominating-file "." ".git"))
      (vc-dir root)
    (message "You are not under a Git repository"))
#+end_src
